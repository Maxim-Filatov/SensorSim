@page "/"
@using RESTfull.Client.Interfaces
@using RESTfull.Client.Models
@using RESTfull.Client.Services
@inject IChatClient ChatClient

@inject IUsersClient UsersClient
@inject TokenService TokenService
@inject ILogger<Index> Logger

<PageTitle>Index</PageTitle>

<PageTitle>Index</PageTitle>

<div class="text-center">
    @if (CurrentUser != null)
    {
        <h1 class="display-4">Welcome, @CurrentUser.Username!</h1>

        <h3>Create new Chat</h3>
        <EditForm Model="@CreateChatModel" OnValidSubmit="@CreateNewChat">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <input class="form-control" id="name" @bind="@CreateChatModel.Name"/>
            <button type="submit">Submit</button>
        </EditForm>

        <h3>Chats</h3>


        @foreach (var chat in CurrentChats)
        {
            <ChatCard Id="@chat.Id" Name="@chat.Name"/>
        }
        
    }
    else
    {
        <h1 class="display-4">Welcome, Guest!</h1>

        <p>You need register or login to continue</p>

        <EditForm Model="@RegisterModel" OnValidSubmit="@LoginOrRegister">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <input class="form-control" id="username" placeholder="Username" @bind="@RegisterModel.Username"/>
            <input class="form-control" id="password" placeholder="Password" type="password" @bind="@RegisterModel.Password"/>
            <button type="submit">Submit</button>
        </EditForm>
    }

</div>

@code {
    public RegisterModel RegisterModel = new();

    public UserModel? CurrentUser;
    
    public CreateChatModel CreateChatModel = new();

    public IEnumerable<ChatModel> CurrentChats = new List<ChatModel>();

    private async Task LoginOrRegister()
    {
        try
        {
            await UsersClient.CreateUserAsync(RegisterModel);

            await TokenService.SetToken(RegisterModel.Username, RegisterModel.Password);
        }
        catch (Exception e)
        {
        }
        finally
        {
            await OnInitializedAsync();
        }
    }

    public async Task CreateNewChat()
    {
        await ChatClient.CreateChat(await TokenService.GetToken(), CreateChatModel);
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CurrentUser = await UsersClient.GetCurrentUserAsync(await TokenService.GetToken());
            CurrentChats = await ChatClient.GetChatsAsync(await TokenService.GetToken());
        }
        catch (Exception e)
        {
            CurrentUser = null;
        }
    }

}